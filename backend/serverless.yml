# For full config options, check the docs:
#    docs.serverless.com

service: CodeChallengeFramework # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 1024
  timeout: 30
  profile: codetest
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - Fn::Join:
          - ':'
          - - arn:aws:lambda
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - function:${self:service}-*
        - Fn::Join:
          - ':'
          - - arn:aws:lambda
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - function:${self:service}-*:*
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        # Note that every table needs 2 entries here: one for the table itself and
        # one to allow access to secondary indexes
        - Fn::Join:
          - ''
          - - arn:aws:dynamodb:*:*:table/
            - Ref: Factoids
        - Fn::Join:
          - ''
          - - arn:aws:dynamodb:*:*:table/
            - Ref: Factoids
            - /*
#  Define function environment variables here
  environment:
    # Serverless specific environment vars
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_STAGE: ${self:custom.stage}
    SERVERLESS_REGION: ${self:custom.region}
  
    FACTOID_TABLE:
      Ref: Factoids

package:
  individually: true
  excludeDevDependencies: true

plugins:
  - serverless-webpack
  - serverless-export-env
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  # Packaging using Webpack
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    packager: npm

functions:
  api:
    handler: handlers/api/handler.handler
    description: API Endpoint Handler
    events:
      - http:
          path: api/{any+}
          method: ANY
          cors: true
          authorizer: aws_iam

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp


# you can add CloudFormation resource templates here
resources:
  Resources:
  # DynamoDB Tables
    Factoids:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: topic
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: topic
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
